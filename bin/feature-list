#!/usr/local/bin/perl
#
# feature-list - list the post-5.8 features available in your perl
#

use strict;
use warnings;
use Getopt::Long;
use List::Util        qw/ max /;
use Perl::FeatureList qw/ features_in_your_perl
                          features_in_later_perls
                          features_in_release
                          get_feature /;

my $usage_string       = "usage: $0 [--future | -f ] [<feature> | <version>]\n";
my $show_minor_changes = 0;
my $show_more_stuff    = 0;
my $show_future_features;
my %typemap = (
    'feature'      => 'F',
    'experimental' => 'X',
    'built-in'     => '',
);

GetOptions(
    'future|f'  => \$show_future_features,
    'all|a'     => \$show_minor_changes,
    'wide|w'    => \$show_more_stuff,
) || die $usage_string;

die $usage_string if @ARGV > 1;

if (@ARGV == 1) {
    show_features_in_release($ARGV[0]) if $ARGV[0] =~ /[0-9\.]/;
    show_feature_help($ARGV[0]);
}

my @available_features = features_in_your_perl($], $show_minor_changes);
display_feature_table(
    \@available_features,
    "new features available in perl $]"
);

if ($show_future_features) {
    my @later_features = features_in_later_perls($], $show_minor_changes);
    display_feature_table(
        \@later_features,
        "features available in later versions of perl"
    );
}

sub display_feature_table
{
    my ($feature_ref, $title) = @_;
    my @features = @$feature_ref;
    my $max_name_len = max map { length($_->{name}) } @features;

    print "\n";
    print "---- $title ----\n" if defined $title;
    foreach my $feature (sort { $a->{version} cmp $b->{version} } @features) {
        if ($show_more_stuff) {
            printf "%1s  %-${max_name_len}s   %-7s %s\n",
                $typemap{ $feature->{type} },
                $feature->{name},
                _concise_version($feature->{version}),
                $feature->{short};
        }
        else {
            printf "%1s  %-${max_name_len}s   %s\n",
                $typemap{ $feature->{type} },
                $feature->{name},
                $feature->{short};
        }
    }
    print "\n";
}

sub show_feature_help
{
    my $feature_name = shift;

    my $feature = get_feature($feature_name)
                  // die "feature '$feature_name' not found\n";
    print $feature->{help};
    exit 0;
}

sub show_features_in_release
{
    my $version  = shift;
    my @features = features_in_release($version);

    die "no features found for '$version'\n" unless @features > 0;

    display_feature_table(\@features);
    exit 0;
}

sub _concise_version
{
    my $version = shift;
    my ($release, $major, $minor) = $version =~ m!^([0-9]+)\.([0-9]{3})([0-9]{3})!;
    $major =~ s/^0+//;
    $minor =~ s/^0// while length($minor) > 1;
    return "${release}.${major}.${minor}";
}

